[gd_scene load_steps=12 format=2]

[ext_resource path="res://Coder/Coder.gd" type="Script" id=1]
[ext_resource path="res://UI/Theme.tres" type="Theme" id=2]
[ext_resource path="res://Coder/Tree.gd" type="Script" id=3]
[ext_resource path="res://Coder/EditorTabs.gd" type="Script" id=4]
[ext_resource path="res://Coder/Sidebar.gd" type="Script" id=5]
[ext_resource path="res://Coder/HelpPanel.gd" type="Script" id=6]

[sub_resource type="Animation" id=1]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("..:size_flags_stretch_ratio")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=2]
resource_name = "hide"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath(".:size_flags_stretch_ratio")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 0.5 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ 0.5, 0.0 ]
}

[sub_resource type="Animation" id=3]
resource_name = "show"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("..:size_flags_stretch_ratio")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 0.5 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="Animation" id=5]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("HelpPanel:size_flags_stretch_ratio")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=4]
resource_name = "show"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("HelpPanel:size_flags_stretch_ratio")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PackedFloat32Array( 0, 0.3 ),
"transitions": PackedFloat32Array( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[node name="Coder" type="VBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 2 )
theme_override_constants/separation = 0
script = ExtResource( 1 )
testing_project_name = "test"

[node name="Code" type="HBoxContainer" parent="."]
offset_right = 320.0
offset_bottom = 239.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 1.62
theme_override_constants/separation = 0

[node name="Sidebar" type="VBoxContainer" parent="Code"]
offset_right = 41.0
offset_bottom = 239.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 0.0
theme_override_constants/separation = 0
script = ExtResource( 5 )

[node name="FileMenu" type="HBoxContainer" parent="Code/Sidebar"]
offset_right = 41.0
offset_bottom = 19.0
theme_override_constants/separation = 1

[node name="AddScriptButton" type="Button" parent="Code/Sidebar/FileMenu"]
offset_right = 20.0
offset_bottom = 19.0
custom_minimum_size = Vector2( 20, 0 )
text = "+"

[node name="RemoveScriptButton" type="Button" parent="Code/Sidebar/FileMenu"]
offset_left = 21.0
offset_right = 41.0
offset_bottom = 19.0
custom_minimum_size = Vector2( 20, 0 )
text = "X"

[node name="AnimationPlayer" type="AnimationPlayer" parent="Code/Sidebar"]
root_node = NodePath("../Tree")
autoplay = "RESET"
anims/RESET = SubResource( 1 )
anims/hide = SubResource( 2 )
anims/show = SubResource( 3 )

[node name="Tree" type="VBoxContainer" parent="Code/Sidebar"]
offset_top = 19.0
offset_right = 41.0
offset_bottom = 19.0
focus_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 0.0
theme_override_constants/separation = 0
script = ExtResource( 3 )

[node name="HelpButton" type="Button" parent="Code/Sidebar"]
offset_top = 220.0
offset_right = 41.0
offset_bottom = 239.0
size_flags_vertical = 10
toggle_mode = true
text = "?"

[node name="EditorTabs" type="TabContainer" parent="Code"]
offset_left = 41.0
offset_right = 320.0
offset_bottom = 239.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 2.0
theme_override_constants/h_separation = 0
theme_override_constants/top_margin = 0
theme_override_constants/side_margin = 0
tab_alignment = 0
tabs_visible = false
script = ExtResource( 4 )

[node name="HelpPanel" type="MarginContainer" parent="."]
offset_top = 239.0
offset_right = 320.0
offset_bottom = 240.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 0.0
theme_override_constants/margin_right = 4
theme_override_constants/margin_top = 0
theme_override_constants/margin_left = 4
theme_override_constants/margin_bottom = 0
script = ExtResource( 6 )

[node name="HelpText" type="RichTextLabel" parent="HelpPanel"]
offset_left = 4.0
offset_right = 316.0
offset_bottom = 1.0
focus_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
bbcode_enabled = true
text = "[color=yellow][center]---- FUNCTIONS ----[/center][/color]

echo(message:String):
	Print to the console

script(script_name):
	get a script instance, for example:
	var player = script(\"player.gd\")
	add_child(player)
	
	To add the script to the scene and start it.

btn(action:String, player_id:int = 0)
	returns a ButtonState object for the given input action and player_id

btn_[x](player_id:int = 0)
	alternative for btn(). For example: btn_a(1) returns info about the A button for player #2

camera(x:float, y:float, zoom:float = null)
	set the camera position (and optionally the zoom value).

get_camera_3d()
	returns the camera
	
get_map(name:String):
	get a Map instance by name

func get_tile(map_name:String, layer_name_or_id, x:int, y:int):
	get the MapTile instance from the given map, layer and grid position.
	
func get_tile_rect_at(map_name: String, world_x: float, world_y:float):
	get a Rect2 object containing the position and size (both Vector2) for the tile at the given world position.
	This world position is turned into a grid position by dividing the numbers by the tilesize of the given map.

[color=yellow][center]---- DRAW FUNCTIONS ----[/center][/color]

func draw_text(text:String, pos_x: int, pos_y: int, color:Color = Color.WHITE)
	Draw a string at the given position

func text_width(text) -> int:
	returns how wide the given text would be when drawn

func text_height(text:String) -> int:
	returns how tall the given text would be when drawn

func draw_map(map_name, x, y)
	draw a map

func draw_sprite(tileset_name, tile_index, x, y, width?, height?)
	draw a single tile from a tileset. width and height are optional arguments.

func brect(x, y, w, h, color:Color, width = 1)
	draw the border of a rectangle

func frect(x, y, w, h, color:Color)
	draw a filled rectangle

func line(x, y, to_x, to_y, width = 1, color = Color.WHITE)
	draw a line

func cls()
	clear the screen"
text = "---- FUNCTIONS ----

echo(message:String):
	Print to the console

script(script_name):
	get a script instance, for example:
	var player = script(\"player.gd\")
	add_child(player)
	
	To add the script to the scene and start it.

btn(action:String, player_id:int = 0)
	returns a ButtonState object for the given input action and player_id

btn_[x](player_id:int = 0)
	alternative for btn(). For example: btn_a(1) returns info about the A button for player #2

camera(x:float, y:float, zoom:float = null)
	set the camera position (and optionally the zoom value).

get_camera_3d()
	returns the camera
	
get_map(name:String):
	get a Map instance by name

func get_tile(map_name:String, layer_name_or_id, x:int, y:int):
	get the MapTile instance from the given map, layer and grid position.
	
func get_tile_rect_at(map_name: String, world_x: float, world_y:float):
	get a Rect2 object containing the position and size (both Vector2) for the tile at the given world position.
	This world position is turned into a grid position by dividing the numbers by the tilesize of the given map.

---- DRAW FUNCTIONS ----

func draw_text(text:String, pos_x: int, pos_y: int, color:Color = Color.WHITE)
	Draw a string at the given position

func text_width(text) -> int:
	returns how wide the given text would be when drawn

func text_height(text:String) -> int:
	returns how tall the given text would be when drawn

func draw_map(map_name, x, y)
	draw a map

func draw_sprite(tileset_name, tile_index, x, y, width?, height?)
	draw a single tile from a tileset. width and height are optional arguments.

func brect(x, y, w, h, color:Color, width = 1)
	draw the border of a rectangle

func frect(x, y, w, h, color:Color)
	draw a filled rectangle

func line(x, y, to_x, to_y, width = 1, color = Color.WHITE)
	draw a line

func cls()
	clear the screen"
selection_enabled = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="HelpPanel"]
root_node = NodePath("../..")
anims/RESET = SubResource( 5 )
anims/show = SubResource( 4 )

[connection signal="pressed" from="Code/Sidebar/FileMenu/AddScriptButton" to="." method="_on_AddScriptButton_pressed"]
[connection signal="pressed" from="Code/Sidebar/FileMenu/RemoveScriptButton" to="." method="_on_RemoveScriptButton_pressed"]
[connection signal="pressed" from="Code/Sidebar/HelpButton" to="HelpPanel" method="toggle"]
